package com.epam.homework.strings.t01;import java.io.*;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.regex.Matcher;import java.util.regex.Pattern;@SuppressWarnings("WeakerAccess")public class CrazyLogger {    private StringBuilder logBuilder = new StringBuilder();    public void addLog(String massage) {        LocalDateTime time = LocalDateTime.now();        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");        logBuilder                .append(time.format(formatter))                .append(" - ")                .append(massage)                .append("\r\n");    }    public void saveLog(String logPath) {        try (BufferedWriter writer = new BufferedWriter(new FileWriter(logPath))) {            writer.write(logBuilder.toString());            writer.flush();        } catch (IOException e) {            e.printStackTrace();        }    }    public static String findLog(String patternText, String logPath) {        Pattern pattern = Pattern.compile(patternText);        String[] logText = new String[0];        File file;        try (FileReader reader = new FileReader(file = new File(logPath))) {            char[] buffer = new char[(int) file.length()];            //noinspection ResultOfMethodCallIgnored            reader.read(buffer, 0, (int) file.length());            logText = new String(buffer).split("\\r\\n");        } catch (IOException e) {            e.printStackTrace();        }        for (String str : logText) {            Matcher m = pattern.matcher(str);            StringBuilder foundLog = new StringBuilder();            if (m.find()) {                foundLog.append(str).append("\r\n");                return foundLog.toString();            }        }        return "Not found";    }}